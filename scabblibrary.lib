#
# 	Function Library (c)2012 - Version 1.1
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#	
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	NO ALTERAR EL SCRIPT, DE LO CONTRARIO EL MISMO DEJARA DE FUNCIONAR
#
#		 Autor: Garcia Vazquez, Manuel Andres
#		Correo: mvazquez@me.com
#		   Web: www.scabb-island.com.ar
#		gitHub: https://github.com/mgvazquez/scabblibrary
#		Issues: https://github.com/mgvazquez/scabblibrary/issues
#
#		   Uso: <USO>
#
#		  Nota: <NOTA>
# 

############## VARIABLES / CONSTANTES ##############
	LIBRARY_VERSION="1.1"
	LIBRARY_FILE="scabblibrary.lib"
	LIBRARY_PATH=${LIBRARY_PATH:-/usr/lib/lsb}
	LIBRARY=${LIBRARY:-$LIBRARY_PATH/$LIBRARY_FILE}

	SCRIPT_FILE=$(basename $0) # Archivo del Script
	SCRIPT_PATH=$(dirname $0) # Path del Script
	SCRIPT_CFG_FILE="${SCRIPT_FILE%.*}.config" # Archivo de configuracion
	DATE=`date "+%Y.%m.%d"`
	HOST_NAME=$(hostname | awk -F '.' '{print $1}') # Nombre del Host

	# --- Character Colors ---
	# Uso: echo -e "${FONT_FG[1]}ROJO${FONT_TYPE[0]}" / El -e habilita el escape de caracteres
	ESC_CHAR=${ESC_CHAR:-"\033"} # Si los colores fallan, reemplazar el '\033' por '\E' o '\e'
	#            Normal(0)     Negrita(1)    Underline(2)     Blink(3)
	FONT_TP=("$ESC_CHAR[0m" "$ESC_CHAR[1m" "$ESC_CHAR[4m" "$ESC_CHAR[5m");
	#           Negro(0)         Rojo(1)        Verde(2)       Amarillo(3)       Azul(4)       Purpura(5)       Cyan(6)         Blanco(7)
	FONT_FG=("$ESC_CHAR[30m" "$ESC_CHAR[31m" "$ESC_CHAR[32m" "$ESC_CHAR[33m" "$ESC_CHAR[34m" "$ESC_CHAR[35m" "$ESC_CHAR[36m" "$ESC_CHAR[37m"); #Letra
	FONT_BG=("$ESC_CHAR[40m" "$ESC_CHAR[41m" "$ESC_CHAR[42m" "$ESC_CHAR[43m" "$ESC_CHAR[44m" "$ESC_CHAR[45m" "$ESC_CHAR[46m" "$ESC_CHAR[47m"); #Fondo

	# --- Conectividad ---
	CHKCONNECTION=${CHKCONNECTION:-false} # Devuelve si se comprobo la conexion
	GOTCONNECTED=${GOTCONNECTED:-false} # Devuelve el estado actual de la conexion

	SCRIPT_TITLE=${SCRIPT_TITLE:-"Template"} # Titulo del Script
	TEMP_PATH=${TEMP_PATH:-"/tmp"} # Path para archivos temporales

	# --- Notificaciones ---
	SEND_MAIL_NOTIFICATION=${SEND_MAIL_NOTIFICATION:-true}

	# --- Verison ---
	VERSION_CHECK=${VERSION_CHECK:-true}

	# --- Logging ---
	STDOUT_ENABLE=${STDOUT_ENABLE:-true} # Habilita (true) / Deshabilita (false) el StdOut del Log
	DEBUG_ENABLE=${DEBUG_ENABLE:-true} # Habilita (true) / Deshabilita (false) el Debug del Log
	LOG_ENABLE=${LOG_ENABLE:-true} # true=Log habilitado / false=Log deshabilitado
	LOG_PATH=${LOG_PATH:-"/var/log"} # Path destino del Log
	LOG_FILE=${LOG_FILE:-$DATE-$SCRIPT_TITLE-$HOST_NAME} # Nombre del Archivo de Log
	LOG=${LOG:-"$LOG_PATH/$LOG_FILE.log"} # Destino final del log

	# --- WGET OPTIONS ---
	WGET_TRIES=${WGET_TRIES:-3}
	WGET_TIMEOUT=${WGET_TIMEOUT:-240}
	WGET_OPTIONS="$WGET_OPTIONS"
	if ! $DEBUG_ENABLE; then
		WGET_DEBUG=${WGET_DEBUG:-"$WGET_OPTIONS -o /dev/null"}
	fi
####################################################


#################### FUNCIONES #####################

	# Funcion de Logging
	log(){
		# Uso <command> | log
		# Ej: echo "Esto es un texto de prueba" | log
		# Ej: tar --directory=$1 --append --file=$PATH_TMP/$2 $3.war | log
		while read data
		do
			if $STDOUT_ENABLE; then
				echo -e "$data"; # Imprime en Pantalla
			fi
			if $LOG_ENABLE; then
				echo -e "[$(date "+%Y.%m.%d") - $(date "+%H:%M:%S")] $data" >> $LOG; # Imprime en el archivo de Log
			fi
		done
	}

	# Funcion de Debug Logging
	debug(){
		# Uso <command> | debug 
		# Ej: echo "Esto es un texto de prueba" | debug
		# Ej: tar --directory=$1 --append --file=$PATH_TMP/$2 $3.war | debug
		while read data
		do
			if $DEBUG_ENABLE; then
				echo -e "$data" | log
			fi
		done		
	}

	# Obtener sub string
	getSubstring(){
		# Uso getSubstring "<string>" "<from_char>" "char_count"
		# <from_char> comienza desde 0 (cero)
		# Ej: getSubstring "WEBP250" "3" "1" --> Devuelve "P"
		echo ${1:$2:$3};
	}

	# Convirte un String de Minúscula a Mayúscula
	toUpper(){
		echo $1 | tr  "[:lower:]" "[:upper:]"
	}

	# Convirte un String de Mayúscula a Minúscula
	toLower(){
		echo $1 | tr  "[:upper:]" "[:lower:]"
	}

	# Busca y reemplaza un string en un archivo
	remplaceString(){
		# Uso / remplaceString "<PATRON>" "<STRING>" "<ARCHIVO>"
		# Ej: remplaceString "Hola" "Chau" "test.cfg"
		sed -i "s/$1/$2/g" "$3"	
	}

	# Hace una pregunta y guarda la respuesta
	doQuestionAndReadAnswer(){
		# Uso / doQuestionAndReadAnswer "<VARIABLE_DESTINO>" "<PREGUNTA>" "<PRELOADER_TEXT> opcional"
		# Ej: doQuestionAndReadAnswer "Cual es su nombre? " "NOMBRE" "Manuel"
		read -e -p "$2" -i "$3" "$1"
	}

	# Chequea similitud de archivos
	chkSum(){
		# Uso / chkSum "<Archivo1>" "<Archivo2>"
		# Ej: chkSum "hola_mundo.xml" "hola_mundo.xml"
		echo -e "- Comprobando integridad de \"$1\" y \"$2\" " | debug
		local _file1=$(/usr/bin/sha1sum $1 | awk -F ' ' '{print $1}')
		local _file2=$(/usr/bin/sha1sum $2 | awk -F ' ' '{print $1}')
		if [[ "$_file1" == "$_file2" ]]; then
			echo -e "- Los archivos son iguales" | debug && return 1
		else
			echo -e "- Los archivos son distintos" | debug && return 0
		fi
	}

	# Devuelve el entorno en el que se encuentra
	getEnvironment(){
		case ${HOST_NAME:3:1} in
			[a-A]) echo "deva";;
			[b-B]) echo "devb";;
			[c-C]) echo "devc";;
			[d-D]) echo "devd";;
			[t-T]) echo "devt";;
			[q-Q]) echo "qa";;
			[p-P]) echo "pr";;
		esac
	}

	# Devuelve el estado de la coneccion
	gotConnected(){
		# CHKCONNECTION=${CHKCONNECTION:-false} # Devuelve si se comprobo la conexion
		# GOTCONNECTED=${GOTCONNECTED:-false} # Devuelve el estado actual de la conexion
		echo -e "- Chequeando conexion" | debug
		if $GOTCONNECTED; then
			echo -e " - Ya se encuentra conectado" | debug && return 0
		else
			if $CHKCONNECTION; then
				echo -e " - Conexion fallida" | debug && return 1
			else
				if $(/usr/bin/GET https://raw.github.com > /dev/null); then
					echo -e " - Conexion realizada" | debug && CHKCONNECTION=true && GOTCONNECTED=true && return 0
				else
					echo -e " - Conexion fallida" | debug && CHKCONNECTION=true && GOTCONNECTED=false && return 1
				fi			
			fi
		fi
	}

	# Rota los archivos
	# Configurar para que el indicador de rotacion sea un caracter antes que la extension / Ej: <sarasa>.0.log
	rotateFile(){
		# Uso / rotateFile "<ARCHIVO>" "<PATH_DESTINO>" "<CANT_BKP>"
		# Ej: rotateFile "<ARCHIVO>" "<PATH_DESTINO>" "<CANT_BKP>"
		echo -e "\nIntentando rotar $1" | debug
		if [[ -f $2/$1 ]]; then
			local _maxCounter=$(($3-1))
			for i in `/usr/bin/find $2 -type f -name "$1*" | sort -r | awk -F '.' '{ if ($NF+0 == $NF) print}'`
			do
				local _fileCounter=`echo $i | awk -F '.' '{ if ($NF+0 == $NF) print $NF}'`
				if [[ $_fileCounter -ge $_maxCounter ]]; then
					/bin/rm -f $i
				else
					/bin/mv $i $2/$1.$(($_fileCounter+1))
				fi
			done
			/bin/mv $2/$1 $2/$1.0
		else
			echo -e "- El archivo solicitado no existe" | debug
		fi
	}

	# Devuelte la hora actual, SOLO la hora 13:15.12 -> 13
	getHour(){
		# Uso / getHour "<>" / "H" -> Hora - "M" -> Minutos - "S" -> Segundos
		# Ej: getHour "M"
		local _hour=$(/bin/date | awk -F ' ' '{print $4}' | awk -F ':' '{print $1}')
		return $_hour
	}

	# Hace una simple plegunta y retorna true-Si, false-No
	doQuestionAndReadSimpleAnswer(){
		# Uso / doQuestionAndReadSimpleAnswer "<VARIABLE_DESTINO>" "<PREGUNTA>"
		# Ej: ddoQuestionAndReadSimpleAnswer "DEPLOY_FRONT" "Desea deployaer FrontEnd.war"
		echo -ne "$2? (S/N) "
		while read -n 1 rta; do
			if [[ $rta = [SsNn] ]]; then
				[[ $rta = [Ss] ]] && eval ${1}=true && echo -e "\r"
				[[ $rta = [Nn] ]] && eval ${1}=false && echo -e "\r"
				break
			fi
		done
	}

	# Dibuja una liena de caracteres en una fila especifica
	linexy(){
		# Uso / linexy "<CARACTER>" "<X>" "<Y>"
		# Ej: linexy "=" "0" "0"
		local _columnas=$(tput cols) # Obtiene la cantidad de columnas del terminal
		if [ $2 == null ]; then echo 1; fi
		if [ $3 == mull ]; then echo 2; fi
		/usr/bin/tput cup $3 $2
		printf "%*s" $_columnas | tr " " "$1" # Reemplaza los espacios por lo que se ponga en $1
	}

	# Header Banner
	headerBanner(){
		# Uso / headerBanner "<TITULO>" "<PARAMETRO?>" / Parametro es opcional 'clear'
		# Ej: headerBanner "Esto es un titulo" "clear"
		# Resultado:
		# ==============================================
		# >>>           Esto es un titulo           <<<
		# ==============================================
		if [ "$2" == "clear" ]; then clear; fi # Limpia la pantalla
		local _columnas=$(tput cols) # Obtiene la cantidad de columnas del terminal
		linexy "=" "0" "0"
		printf "%-*s%*s%*s\n" "3" ">>>" "$(((($_columnas+${#1})/2)-3))" "$1" "$(($_columnas-(($_columnas+${#1})/2)))" "<<<"
		linexy "=" "0" "2"
		echo -e "\n"
	}

	# Chequea que el directorio exista y tenga permisos de scritura
	chkPath(){
		# Uso / chkPath "<path>"
		# Ej: chkPath "/mnt/releases"
		echo -e "\nVerificando el directorio: $1" | debug
		if [[ -d $1 ]]; then
			echo -e "- Existe" | debug
			if [[ -w $1 ]]; then
				echo -e "- Tiene permisos de escritura" | debug
				if [[ -w $1 ]]; then
					echo -e "- Tiene permisos de lectura" | debug && return 0
				else
					echo -e "- No tiene permisos de lectura" | log && return 3
				fi
			else
				echo -e "- No tiene permisos de escritura" | log && return 2
			fi
		else
			echo -e "- No existe" | log && return 1
		fi
	}

	# Cheque la integridad del Script
	chkScriptIntegrity(){
		# Uso: chkScriptIntegrity "<FILE_NAME>" "<TEMP_PATH>"
		# Ej: chkScriptIntegrity "$LIBRARY_FILE" "/var/tmp"
		if [[ $# -gt 0 ]]; then
			local _fileScript=$(basename $1)
			local _fileScriptPath=$(dirname $1)
			local _tmpPath=$2;
		fi
		local _fileScript=${_fileScript:-$SCRIPT_FILE}
		local _fileScriptPath=${_fileScriptPath:-$SCRIPT_PATH}
		local _tmpPath=${_tmpPath:-"/var/tmp"}
		echo -e "\nChequeando integridad de: $_fileScript" | log
		if [[ ! -f "$_tmpPath/${_fileScript%.*}.sha" ]]; then
			echo -e "- No existe el archivo de firma '${_fileScript%.*}.sha', se intenta descargar." | log
			if gotConnected; then
				/usr/bin/wget -P $_tmpPath -t $WGET_TRIES -T $WGET_TIMEOUT $WGET_DEBUG $WGET_OPTIONS https://raw.github.com/mgvazquez/${_fileScript%.*}/master/sha1/${_fileScript%.*}.sha
				if [[ $? -gt 0 ]]; then
					echo -e "- ERROR: Imposible descargar el archivo de firma" | log
					echo -e "(Intente descargarlo manualmente desde http://github.com/mgvazquez/${_fileScript%.*}/)" | log
					exit 1
				else
					echo -e "- Archivo de firma descargado satisfactoriamente" | log
				fi
			else
				echo -e "- ERROR: Imposible descargar el archivo de firma" | log
				echo -e "(Intente descargarlo manualmente desde http://github.com/mgvazquez/${_fileScript%.*}/)" | log
				exit 1
			fi
		fi
		local _file1=$(/bin/cat $_tmpPath/${_fileScript%.*}.sha | awk -F ' ' '{print $1}')
		echo -e "- Checksum del '${_fileScript%.*}.sha': $_file1" | debug
		local _file2=$(/usr/bin/sha1sum $_fileScriptPath/$_fileScript | awk -F ' ' '{print $1}')
		echo -e "- Checksum del '$_fileScript': $_file2" | debug
		if [[ "$_file1" == "$_file2" ]]; then
			echo -e "- Integridad comprobada" | log && return 0
		 else
		 	echo -e "- Falla de integridad" | log && exit 1
		fi
	}

	# Chequea que sea posible conectarse via ssh a un equipo con un usuario especifico
	chkSsh(){
		# Uso: chkSsh "<HOST>" "<user>"
		# Ej: chkSsh "WEBP69" "root"
		echo -e "\nChequeando conectividad via ssh con $1 ($2)" | debug
		/usr/bin/ssh -q -o "ConnectTimeout 5" $2@$1 exit
		if [[ $? -eq 0 ]]; then
			echo -e "- Conecxion realizada" | debug && return 0;
		else
			echo -e "- Conecxion fallida" | debug && return 1;
		fi
	}

	# Envia mail
	sendMail(){
		# Uso: sendMail "<DESTINO>" "<ASUNTO>" "<CUERPO>" "<FROM>" / campo <FROM> es opcional
		# Ej: sendMail "mvazquez@me.com" "Esto es SendMail" "foo faaa" "sendmail@localhost.com"
		# $SEND_MAIL_NOTIFICATION -> Habilita (true) / Deshabilita (false) las notificaciones de correo
		# NOTA: El comando mail debe estar instalado y configurado.
		if $SEND_MAIL_NOTIFICATION; then
			echo -e "\nEnviando notificaciones de correo..." | log
			if [[ -z "$1" ]]; then echo -e "- ERROR: No se especifico un destinarario" | log; return 1; fi
			local _from=${_from:-$HOST_NAME@vdc.dridco.com}
			if [[ -n $4 ]]; then local _from=$4; fi
			local _fromName=$(toUpper "$(echo "$_from" | awk -F '@' '{print $1}')")
			echo -e "- Desde: $_fromName ($_from)" | debug
			echo -e "- Para: $1" | debug
			echo -e "- Asunto: $2" | debug
			echo -e "- Cuerpo: $3" | debug
			echo -e "Subject: $2\n\n$3" | /usr/sbin/sendmail -F $_fromName -f $_from -r $_from  $1 2>&1 | debug
		fi
	}

	# Chequea la version del Script
	chkScriptVersion(){
		# Uso: chkScriptVersion "<FILE_NAME>" "<FILE_VERSION>"
		# Ej: chkScriptVersion "$LIBRARY_FILE" "$LIBRARY_VERSION"
		# Nota: Debe estar seteada la variable <VERSION>
		if ! $VERSION_CHECK; then return 1;	fi
		if [[ $# -gt 0 ]]; then local _fileScript=$1; local _localVersion=$2; fi
		local _fileScript=${_fileScript:-$SCRIPT_FILE}
		echo -e "\nChequeando version de: $_fileScript" | log
		if ! gotConnected; then
			echo "- Error de conexion, imposible conectar con el repositorio remoto" | log && return 0
		fi
		local _remoteVersion=$(GET https://raw.github.com/mgvazquez/${_fileScript%.*}/master/$_fileScript | grep "VERSION" | awk -F '=' '{print $NF}' | sed 's/"//g' | head -n 1)
		echo -e "- Version Remota: $_remoteVersion" | debug
		local _localVersion=${_localVersion:-$SCRIPT_VERSION}
		echo -e "- Version Local: $_localVersion" | debug
		if [[ $_localVersion == $_remoteVersion ]]; then
			echo -e "- Version de '$_fileScript' actualizada" | log
			return 0
		fi
		local IFS=.
		local _localVersionArray=($_localVersion)
		local _remoteVersionArray=($_remoteVersion)
		if [ ${#_localVersionArray[*]} -ge ${#_remoteVersionArray[*]} ]; then
			local _forLoop=${#_localVersionArray[*]}
		else
			local _forLoop=${#_remoteVersionArray[*]}
		fi
		for ((i=0; i<$_forLoop; i++)); do
			if [[ -z ${_localVersionArray[i]} ]]; then
				local _localVersionArray[i]=0
			fi
			if [[ -z ${_remoteVersionArray[i]} ]]; then
				local _remoteVersionArray[i]=0
			fi			        
			if [[ ${_localVersionArray[i]} -gt ${_remoteVersionArray[i]} ]]; then
				unset local IFS
				echo -e "- Version local de '$_fileScript' inconsistente" | log
				echo -e "(La version local es superior a la que se encuentra en el repositorio)" | log
				return 0
			fi  
			if [[ ${_localVersionArray[i]} -lt ${_remoteVersionArray[i]} ]]; then
				unset local IFS
				echo -e "- Nueva versión de ${_fileScript%.*}: Actual (v$_localVersion) --> Nueva (v$_remoteVersion)" | log
				echo -e "(Puede descargarla desde http://github.com/mgvazquez/${_fileScript%.*})" | log
				return 0
			fi
		done
	}

####################################################


####################### MAIN #######################
	clear
	chkScriptIntegrity "$LIBRARY";
	chkScriptVersion "$LIBRARY_FILE" "$LIBRARY_VERSION";
	echo -e "\n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-" | log
####################################################
